{
    "project": {
        "name": "spree-ember-checkouts",
        "shortName": "checkouts",
        "description": "Checkout functionality for a Spree Ember Application.",
        "version": "0.0.1-beta.1.2eb92416"
    },
    "files": {
        "addon/mixins/current-order-support.js": {
            "name": "addon/mixins/current-order-support.js",
            "modules": {},
            "classes": {
                "Mixin.CurrentOrderSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Mixin": 1
            }
        },
        "addon/serializers/order.js": {
            "name": "addon/serializers/order.js",
            "modules": {},
            "classes": {
                "Serializer.Order": 1
            },
            "fors": {},
            "namespaces": {
                "Serializer": 1
            }
        },
        "app/services/checkouts.js": {
            "name": "app/services/checkouts.js",
            "modules": {},
            "classes": {
                "Service.Checkouts": 1
            },
            "fors": {},
            "namespaces": {
                "Service": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "Mixin.CurrentOrderSupport": {
            "name": "Mixin.CurrentOrderSupport",
            "shortname": "Mixin.CurrentOrderSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Mixin",
            "file": "addon/mixins/current-order-support.js",
            "line": 3,
            "description": "Provides Current Order and Checkout Functionality to the Spree service.  This\nmixin is applied to the Spree service when spree-ember-checkouts initializes,\ntherefore all functionality described here is available like so:\n\n```javascript\nthis.spree.addToCart(variantModel, 5);\n```",
            "extends": "Ember.Mixin"
        },
        "Serializer.Order": {
            "name": "Serializer.Order",
            "shortname": "Serializer.Order",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Serializer",
            "file": "addon/serializers/order.js",
            "line": 3,
            "description": "The Order Serializer converts the Order model into a JSON payload as dictated \nby Spree's \"Checkouts\" endpoint.  The payload is dependant on the state of the \norder.",
            "extends": "SpreeSerializer"
        },
        "Service.Checkouts": {
            "name": "Service.Checkouts",
            "shortname": "Service.Checkouts",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Service",
            "file": "app/services/checkouts.js",
            "line": 2,
            "description": "The checkouts service is a Stateful global for progressing an Order through \nthe Spree checkout, via the Checkouts endpoint.  It also serves as the \n\"canonical\" state for a Checkout frontend, and should be used to progress\nforward and backward through an order's steps.\n\nIt's designed to allow a reactive programming style for the checkout \nfrontend.  The `spree-checkout` component from the Spree Ember Storefronts\npackage is an example of this style.\n\n```javascript\nvar checkouts = this.get('spree.checkouts');\n\ncheckouts.get('currentState');\n// => \"address\"\n\ncheckouts.transition().then(function() {\n  checkouts.get('currentOrder.state');\n  // => \"delivery\"\n  checkouts.get('currentState');\n  // => \"delivery\"\n\n  checkouts.transition(\"address\").then(function() {\n\n    // Here, the Checkout and Current Order state has diverged.  This is\n    // expected behaviour, and their states will reconcile when the \n    // checkout progresses forward again.\n    \n    checkouts.get('currentOrder.state');\n    // => \"delivery\"\n    checkouts.get('currentState');\n    // => \"address\"\n  });\n});\n```",
            "uses": [
                "Ember.FSM.Stateful"
            ]
        }
    },
    "classitems": [
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 17,
            "description": "A generic event triggered whenever a Spree Server request fails.",
            "itemtype": "event",
            "name": "serverError",
            "params": [
                {
                    "name": "error",
                    "description": "The error object returned from the Spree Server.",
                    "type": "Object"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 24,
            "description": "Triggered whenever a Line Item is created or updated.",
            "itemtype": "event",
            "name": "didAddToCart",
            "params": [
                {
                    "name": "lineItem",
                    "description": "The newly updated lineItem object",
                    "type": "DS.Model"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 31,
            "description": "Triggered whenever a Line Item is created or updated.",
            "itemtype": "event",
            "name": "addToCartFailed",
            "params": [
                {
                    "name": "error",
                    "description": "The returned Server Error.",
                    "type": "Error"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 38,
            "description": "Triggered whenever a new Order is created for the checkout user.",
            "itemtype": "event",
            "name": "didCreateNewOrder",
            "params": [
                {
                    "name": "order",
                    "description": "The newly created order object",
                    "type": "DS.Model"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 45,
            "description": "Triggered whenever a new Order is created for the checkout user.",
            "itemtype": "event",
            "name": "newOrderCreateFailed",
            "params": [
                {
                    "name": "error",
                    "description": "The returned Server Error.",
                    "type": "Object"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 52,
            "description": "Triggered whenever a new Order is created for the checkout user.",
            "itemtype": "event",
            "name": "didClearCurrentOrder",
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 58,
            "description": "Triggered whenever the Current Order changes State.",
            "itemtype": "event",
            "name": "checkoutStateDidChange",
            "params": [
                {
                    "name": "order",
                    "description": "The Current Order.",
                    "type": "DS.Model"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 65,
            "description": "Triggered when the `_saveCurrentOrder` call succeeds.",
            "itemtype": "event",
            "name": "didSaveCurrentOrder",
            "params": [
                {
                    "name": "currentOrderPromise",
                    "description": "A promise that resolves to \nthe Current Order",
                    "type": "Ember.RSVP.Promise"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 73,
            "description": "Triggered when the `_saveCurrentOrder` call fails.",
            "itemtype": "event",
            "name": "saveCurrentOrderFailed",
            "params": [
                {
                    "name": "error",
                    "description": "The returned Server Error.",
                    "type": "Error"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 80,
            "description": "Triggered when the `advanceCurrentOrder` call succeeds.",
            "itemtype": "event",
            "name": "didAdvanceCurrentOrder",
            "params": [
                {
                    "name": "currentOrderPromise",
                    "description": "A promise that resolves to \nthe Current Order",
                    "type": "Ember.RSVP.Promise"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 88,
            "description": "Triggered when the `advanceCurrentOrder` call fails.",
            "itemtype": "event",
            "name": "advanceCurrentOrderFailed",
            "params": [
                {
                    "name": "error",
                    "description": "The returned Server Error.",
                    "type": "Error"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 95,
            "description": "Triggered whenever the Current Order reached it's \"Complete\" State.",
            "itemtype": "event",
            "name": "currentOrderDidComplete",
            "params": [
                {
                    "name": "order",
                    "description": "The Current Order.",
                    "type": "DS.Model"
                }
            ],
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 102,
            "description": "A method called in the `spree-ember-checkouts` initializer after the\n`Checkouts` mixin is applied to the Spree service, to initialize functionality\nin this mixin.",
            "itemtype": "method",
            "name": "_restoreCurrentOrder",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Always resolves to `true`.",
                "type": "Boolean"
            },
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 141,
            "description": "The token used to Authenticate the current user against the current order.  Persisted\nto local storage via `spree-ember-core/mixins/storable`.  This property is\nsent to the Spree server via the header `X-Spree-Order-Token`.",
            "itemtype": "property",
            "name": "guestToken",
            "type": "String",
            "readonly": "",
            "default": "null",
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 153,
            "description": "The user's Current Order number, persisted to local storage via\n`spree-ember-core/mixins/storable`.  This property is sent to the Spree\nserver via the header `X-Spree-Order-Id`.",
            "itemtype": "property",
            "name": "orderId",
            "type": "String",
            "readonly": "",
            "default": "null",
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 165,
            "description": "A reference to the Current Order.  It is only set twice in this code,\nonce on Application initialization (in the case it was persisted), and once\nwhen a new order is created through the internal method `_createNewOrder`.",
            "itemtype": "property",
            "name": "currentOrder",
            "type": "DS.Model",
            "default": "null",
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 176,
            "description": "A reference to the Stateful Checkouts service.",
            "itemtype": "property",
            "name": "checkouts",
            "type": "Ember.Service",
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 184,
            "description": "Adds a lineItem to the currentOrder. If there is no Current Order,\nSpree Ember will request a new order from the server, and set it as the\nCurrent Order on the Spree service.",
            "itemtype": "method",
            "name": "addToCart",
            "params": [
                {
                    "name": "variant",
                    "description": "A class of the variant model",
                    "type": "DS.Model"
                },
                {
                    "name": "quantity",
                    "description": "Optional, A quantity for the Line Item.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "A promise that resolves to the newly saved Line Item.",
                "type": "Ember.RSVP.Promise"
            },
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 213,
            "description": "An internal method for saving Line Items.  If it is called for a variant that\nis already in the current order, it will add to the corresponding Line Item's\nquantity, otherwise it will create a new Line Item for that variant.",
            "itemtype": "method",
            "name": "_saveLineItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "variant",
                    "description": "A class of the variant model",
                    "type": "Ember.Object"
                },
                {
                    "name": "quantity",
                    "description": "A quantity for the `lineItem`",
                    "type": "Integer"
                },
                {
                    "name": "order",
                    "description": "The corresponding order",
                    "type": "Ember.Object"
                }
            ],
            "return": {
                "description": "A promise that resolves to the newly created or\nupdated `lineItem` object.",
                "type": "Ember.RSVP.Promise"
            },
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 252,
            "description": "Will attempt to create a new Order for the checkout user, and save the `orderId`\nand `guestToken` to the Spree service, so that it will persist across page\nrefreshes.  It will also initiate the state machine for the current order.",
            "itemtype": "method",
            "name": "_createNewOrder",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "A promise that resolves to the newly created\nSpree Order.",
                "type": "Ember.RSVP.Promise"
            },
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/mixins/current-order-support.js",
            "line": 283,
            "description": "Clears the current order and any reference to it.",
            "itemtype": "method",
            "name": "clearCurrentOrder",
            "return": {
                "description": "Always returns `true`.",
                "type": "Boolean"
            },
            "class": "Mixin.CurrentOrderSupport",
            "namespace": "Mixin"
        },
        {
            "file": "addon/serializers/order.js",
            "line": 13,
            "description": "By default, Ember's Active Model Serializer will merge the JSON payload\nreturned by the `serialize` call under the model's name.  The Spree\nCheckouts endpoint expects objects as siblings in the payload, so when we're\nsaving the checkouts via `DS.Order#saveToCheckouts()` we override this \nbehaviour.",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "data",
                    "description": "The payload for the request.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The model factory.",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "snapshot",
                    "description": "The record's snapshot.",
                    "type": "Ember.Object"
                },
                {
                    "name": "options",
                    "description": "Options for the request.",
                    "type": "Object"
                }
            ],
            "class": "Serializer.Order",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/order.js",
            "line": 33,
            "description": "Serializes the Order into a format the Spree Checkouts endpoint expects.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "snapshot",
                    "description": "A snapshot of the order model for serialization.",
                    "type": "Snapshot"
                }
            ],
            "class": "Serializer.Order",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/order.js",
            "line": 47,
            "description": "A reference to the Stateful Checkouts service.",
            "itemtype": "property",
            "name": "checkouts",
            "type": "Ember.Service",
            "class": "Serializer.Order",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/order.js",
            "line": 55,
            "description": "Serializes the Order into a format the Spree Checkouts endpoint expects, \ndependant on the state of Checkouts service.",
            "itemtype": "method",
            "name": "_serializeForCheckouts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "snapshot",
                    "description": "A snapshot of the order model for serialization.",
                    "type": "Ember.Object"
                },
                {
                    "name": "orderJSON",
                    "description": "The regular JSON for the Order.",
                    "type": "Object"
                }
            ],
            "class": "Serializer.Order",
            "namespace": "Serializer"
        },
        {
            "file": "addon/serializers/order.js",
            "line": 105,
            "description": "Extracts the errors from an Invalid response from the Server.  Overrides the\ndefault method to include a Top Level error from the payload as `base` in the\n`DS.Errors` collection.",
            "itemtype": "method",
            "name": "extractErrors",
            "params": [
                {
                    "name": "store",
                    "description": "The ember store used for this request.",
                    "type": "subclass of DS.Store"
                },
                {
                    "name": "type",
                    "description": "The Order Factory.",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "The returned JSON Payload.",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "The order's ID.",
                    "type": "Integer"
                }
            ],
            "class": "Serializer.Order",
            "namespace": "Serializer"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 43,
            "description": "Provided by Ember FSM, the current state of the checkout.  This will often\ndiverge from the `currentOrder.get('state')`, and will be reconsoidated when\nthe state machine calls `validateOrder`.  This is what we use as the \ncononical \"state\" for a frontend's Checkout flow.",
            "itemtype": "property",
            "name": "currentState",
            "type": "String",
            "default": "\"idle\"",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 53,
            "description": "Provided by Ember FSM, returns true when there's an active transition.  Handy\nfor showing customers loading states during the checkout.",
            "itemtype": "property",
            "name": "isLoading",
            "type": "Boolean",
            "default": "false",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 61,
            "description": "A reference to the Spree Service.",
            "itemtype": "property",
            "name": "spree",
            "type": "Ember.Service",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 68,
            "description": "A reference to the Spree Object's `currentOrder`.",
            "itemtype": "property",
            "name": "currentOrder",
            "type": "DS.Model",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 75,
            "description": "Used by Ember FSM to name the `initialState`.",
            "itemtype": "property",
            "name": "fsmStates",
            "type": "Object",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 84,
            "description": "Used by Ember FSM to describe the checkout flow.",
            "itemtype": "property",
            "name": "fsmEvents",
            "type": "Object",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 170,
            "description": "If a state name is passed to this method, the state machine will attempt to\ntransition directly to that state.  If not, we will attempt to transition\nto the next state in the checkout flow.",
            "itemtype": "method",
            "name": "transition",
            "params": [
                {
                    "name": "stateName",
                    "description": "Optional, a state to attempt transition to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise that resolves when the State Machine\nresolves it's transition.",
                "type": "Ember.RSVP.Promise"
            },
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 202,
            "description": "Called whenever the State Machine enters \"Address\".  Ensures that an address\nobject exists for the order's `shipAddress`.",
            "itemtype": "method",
            "name": "_ensureShipAddressExists",
            "access": "private",
            "tagname": "",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 216,
            "description": "Called whenever the State Machine enters \"Payment\".  Ensures that a payment\nand source object exists for the `currentOrder`.",
            "itemtype": "method",
            "name": "_ensurePaymentExists",
            "access": "private",
            "tagname": "",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 234,
            "description": "When `validateOrder` fails, the State Machine will automatically transition\nto \"failed\".  Here, we listen to that transition, and then automatically\nrun this method, to reset the State Machine to the State of the \n`currentOrder`.\n\nNote: Because Ember QUnit relies on returned promise for Unit tests, we \ndisable this method in `test`, and manually reset the State Machine when\ntesting failed transitions.",
            "itemtype": "method",
            "name": "_resetStateMachine",
            "access": "private",
            "tagname": "",
            "class": "Service.Checkouts",
            "namespace": "Service"
        },
        {
            "file": "app/services/checkouts.js",
            "line": 250,
            "description": "Used to save changes to the `currentOrder` to Spree's Checkouts API.  Is only\ncalled by the state machine when advancing to a later state in the flow.",
            "itemtype": "method",
            "name": "_validateOrder",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "transition",
                    "description": "The current state machine transition.",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "A promise that resolves when the server\nresponse returns.",
                "type": "Ember.RSVP.Promise"
            },
            "class": "Service.Checkouts",
            "namespace": "Service"
        }
    ],
    "warnings": []
}